{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3866417,"sourceType":"datasetVersion","datasetId":843852}],"dockerImageVersionId":30004,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<h1><center>YOLO V5 Car Object Detection</center></h1>\n\n<img src=\"https://pjreddie.com/media/image/yologo_2.png\" width=\"400\" height=\"400\" />\n\n\n<div style=\"text-align: right\"> Source: https://pjreddie.com/</div>","metadata":{}},{"cell_type":"markdown","source":"### Libraries üìö‚¨á","metadata":{}},{"cell_type":"code","source":"import os, time, random\nimport numpy as np\nimport pandas as pd\nimport cv2, torch\nfrom tqdm.auto import tqdm\nimport shutil as sh\n\nfrom IPython.display import Image, clear_output\nimport matplotlib.pyplot as plt\n%matplotlib inline","metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n\n!git clone https://github.com/ultralytics/yolov5  # clone repo\n!pip install -U pycocotools\n!pip install -qr yolov5/requirements.txt  # install dependencies\n!cp yolov5/requirements.txt ./","metadata":{"_kg_hide-output":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Loading Data üìù / Preprocessing ‚öôÔ∏è","metadata":{}},{"cell_type":"code","source":"img_h, img_w, num_channels = (380, 676, 3)\ndf = pd.read_csv('../input/car-object-detection/data/train_solution_bounding_boxes (1).csv')\ndf.rename(columns={'image':'image_id'}, inplace=True)\ndf['image_id'] = df['image_id'].apply(lambda x: x.split('.')[0])\ndf['x_center'] = (df['xmin'] + df['xmax'])/2\ndf['y_center'] = (df['ymin'] + df['ymax'])/2\ndf['w'] = df['xmax'] - df['xmin']\ndf['h'] = df['ymax'] - df['ymin']\ndf['classes'] = 0\ndf['x_center'] = df['x_center']/img_w\ndf['w'] = df['w']/img_w\ndf['y_center'] = df['y_center']/img_h\ndf['h'] = df['h']/img_h\ndf.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"index = list(set(df.image_id))\nimage = random.choice(index)\nprint(\"Image ID: %s\"%(image))\nimg = cv2.imread(f'/kaggle/input/car-object-detection/data/training_images/{image}.jpg')\nimg.shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image = random.choice(index)\nImage(filename=f'/kaggle/input/car-object-detection/data/training_images/{image}.jpg',width=600)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Training (Work in Progress)","metadata":{}},{"cell_type":"code","source":"source = 'training_images'\nif True:\n    for fold in [0]:\n        val_index = index[len(index)*fold//5:len(index)*(fold+1)//5]\n        for name,mini in tqdm(df.groupby('image_id')):\n            if name in val_index:\n                path2save = 'val2017/'\n            else:\n                path2save = 'train2017/'\n            if not os.path.exists('/tmp/convertor/fold{}/labels/'.format(fold)+path2save):\n                os.makedirs('/tmp/convertor/fold{}/labels/'.format(fold)+path2save)\n            with open('/tmp/convertor/fold{}/labels/'.format(fold)+path2save+name+\".txt\", 'w+') as f:\n                row = mini[['classes','x_center','y_center','w','h']].astype(float).values\n                row = row.astype(str)\n                for j in range(len(row)):\n                    text = ' '.join(row[j])\n                    f.write(text)\n                    f.write(\"\\n\")\n            if not os.path.exists('/tmp/convertor/fold{}/images/{}'.format(fold,path2save)):\n                os.makedirs('/tmp/convertor/fold{}/images/{}'.format(fold,path2save))\n            sh.copy(\"/kaggle/input/car-object-detection/data/{}/{}.jpg\".format(source,name),'/tmp/convertor/fold{}/images/{}/{}.jpg'.format(fold,path2save,name))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#!python train.py --batch 2 --epochs 1 --data ../input/yolov5-config/car.yaml --cfg ../input/yolov5-config/yolov5x.yaml --name yolov5x_fold0_new","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Prediction","metadata":{}},{"cell_type":"code","source":"!python yolov5/detect.py --weights yolov5/yolov5s.pt --img 676 --conf 0.4 --source /kaggle/input/car-object-detection/data/testing_images","metadata":{"_kg_hide-output":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predicted_files = []\nfor (dirpath, dirnames, filenames) in os.walk(\"runs/detect/exp\"):\n    predicted_files.extend(filenames)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Image(filename=f'runs/detect/exp/{random.choice(predicted_files)}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Image(filename=f'runs/detect/exp/{random.choice(predicted_files)}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Image(filename=f'runs/detect/exp/{random.choice(predicted_files)}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Image(filename=f'runs/detect/exp/{random.choice(predicted_files)}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Image(filename=f'runs/detect/exp/{random.choice(predicted_files)}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Image(filename=f'runs/detect/exp/{random.choice(predicted_files)}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!rm -rf runs yolov5","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Work in Progress","metadata":{}},{"cell_type":"markdown","source":"### If you found this kernel helpful, please upvote it üöû","metadata":{}}]}